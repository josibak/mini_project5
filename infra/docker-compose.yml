services:
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      CLUSTER_ID: "kraft-cluster-01"
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: "1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # gateway:
  #   build: ../gateway
  #   container_name: gateway
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - kafka
  #     - authormanagement
  #     - manuscript
  #     - aipublication
  #     - book
  #     # - usermanagement
  #     - subcription
  #     - point
  #     # - frontend
  #   restart: on-failure

  # authormanagement:
  #   build: ../authormanagement
  #   container_name: authormanagement
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - kafka
  #   restart: on-failure

  # manuscript:
  #   build: ../manuscript
  #   container_name: manuscript
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - kafka
  #   restart: on-failure

  # aipublication:
  #   build: ../aipublication        
  #   container_name: aipublication  # 고유 컨테이너 이름
  #   ports:
  #     - "8084:8084"                
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - kafka
  #   restart: on-failure

  book:
    build: ../book   # book 디렉토리에 Dockerfile 있어야 함
    container_name: book
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - kafka
    restart: on-failure  # book 컨테이너가 kafka 준비 전에 죽더라도 자동으로 재시작해서 정상적으로 붙게 해줌

  usermanagement:
    build: ../usermanagement
    container_name: usermanagement
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - kafka
    restart: on-failure


  # subcription:
  #   build: ../subcription   
  #   container_name: subcription
  #   ports:
  #     - "8087:8087"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - kafka
  #   restart: on-failure

  point:
    build: ../point
    container_name: point
    ports:
      - "8088:8088"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - kafka
    restart: on-failure

  # frontend:
  #   build: ../frontend
  #   container_name: frontend
  #   ports:
  #     - "3000:3000"  # Vite 기본 포트
  #   environment:
  #     - NODE_ENV=development
  #   restart: on-failure

volumes:
  kafka-data:
